#!/usr/bin/env python3
__author__ = 'Stephan Bechter <stephan@apogeum.at>'
import subprocess
import re
import hashlib
import sys
import argparse
import textwrap
import math
import time
import collections
import logging

# colors
COLOR_NODE = "cornsilk"
COLOR_NODE_MERGE = "cornsilk3"
#COLOR_NODE_MERGE = "red"
COLOR_NODE_FIRST = "cyan"
COLOR_NODE_CHERRY_PICK = "burlywood1"
COLOR_NODE_REVERT = "azure4"
COLOR_HEAD = "Gold"
COLOR_TAG = "yellow2"
COLOR_BRANCH = "orange"
COLOR_STASH = "red"

COLOR_TEST = "orchid1"
COLOR_MASTER = "paleturquoise"
COLOR_ROBOTBUILDER = "palegreen"

pattern = re.compile(r'^\[(\d+)\|\|(.*)\|\|(.*)\|\|(.*)\|\|\s?(.*)\]\s([0-9a-f]*)\s?([0-9a-f]*)\s?([0-9a-f]*)$')
revertMessagePattern = re.compile(r'Revert "(.*)"')

parser = argparse.ArgumentParser()

parser.add_argument("-x", "--debug", dest="debug", action="store_true", help="Show debug messages on stderr")
parser.add_argument("-m", "--messages", dest="messages", action="store_true", help="Show commit messages in node" )
parser.add_argument("-r", "--range", help="git commit range" )

args = parser.parse_args()

logging.basicConfig(level=logging.INFO)
if args.debug:
    logging.getLogger().setLevel(logging.DEBUG)

def graphviz_list (name, s):
    if len(s) < 1:
        return ""
    else:
        return ",{}=\"{}\"".format(name, ",".join(s))

revRange = ""
if args.range:
    revRange = " " + args.range
    logging.info("Range: %s", revRange)

gitLogCommand = 'git log --pretty=format:"[%ct||%an||%ci||%s||%d] %h %p" --all ' + revRange
logging.info('Git log command: %s', gitLogCommand)
output = subprocess.Popen(gitLogCommand, shell=True, stdout=subprocess.PIPE, universal_newlines=True)
(out, err) = output.communicate()
lines = out.split("\n")

hashes = {}
dates = {}
messages = {}
predefinedNodeColor = {}

def getCommitDiff(hash):
    # get only the changed lines (starting with + or -), no line numbers, hashes, ...
    command = 'git diff ' + hash + '^ ' + hash + ' | grep "^[-+]"'
    logging.info("Hash Command: %s", command)
    diffOutput = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, universal_newlines=True)
    (diff, err) = diffOutput.communicate()
    return diff

def getCommitDiffHash(hash):
    diff = getCommitDiff(hash)
    sha = hashlib.sha1(diff.encode('utf-8'))
    return sha.hexdigest()

print("digraph G {")
print('    size="7.5,26" margin=0.5')
#first extract messages
for line in lines:
    match = re.match(pattern, line)
    if match:
        date = match.group(1)
        message = match.group(4)
        commitHash = match.group(6)
        if message in messages:
            existing = messages[message]
            #print(dates[existing]+" - "+date)
            if dates[existing] > date:
                #print("setting message ["+message+"] with ["+hash+"]")
                messages[message] = commitHash
        else:
            messages[message] = commitHash
        dates[commitHash] = date
        hashes[commitHash] = True

cutoff = time.time() - (24 * 60 * 60)
for line in lines:
    #print(line)
    match = re.match(pattern, line)
    if match:
        date = match.group(1)
        when = int(date)
        user = match.group(2)
        pdate = match.group(3)
        message = match.group(4)
        ref = match.group(5)
        logging.info ("ref %s", ref)
        commitHash = match.group(6)
        parentHash1 = match.group(7)
        parentHash2 = match.group(8)

        link = ""
        link2 = ""
        labelExt = ""
        nodeMessage = ""
        nodeShape = "box"
        nodeStyle = set()
        nodeStyle.add("filled")

        if when > cutoff:
            nodeStyle.add("bold")

        if args.messages:
            nodeMessage = "\n" + message.replace("\"", "'");
        if commitHash in predefinedNodeColor:
            labelExt = "\\nSTASH INDEX"
            nodeColor = predefinedNodeColor[commitHash]
        else:
            nodeColor=COLOR_NODE

        if parentHash1:
            if parentHash1 in hashes:
                link = " \"" + commitHash + "\"->\"" + parentHash1 + "\" [dir=back];"
        else:
            #initial commit
            nodeColor = COLOR_NODE_FIRST

        if parentHash2:
            if parentHash2 in hashes:
                link2 = " \"" + commitHash + "\"->\"" + parentHash2 + "\" [dir=back];"

        if parentHash1 and parentHash2:
            nodeColor = COLOR_NODE_MERGE
            #nodeShape = "box3d"
            nodeStyle.add("diagonals")

        if message in messages:
            # message exists in history - possible cherry-pick -> compare diff hashes
            existingHash = messages[message]
            if commitHash is not existingHash and date > dates[existingHash]:
                diffHashOld = getCommitDiffHash(existingHash)
                diffHashActual = getCommitDiffHash(commitHash)
                logging.info("M [%s, %s, %s]", message, diffHashOld, diffHashActual)
                if diffHashOld == diffHashActual:
                    logging.info("equal")
                    #print('    "' + str(existingHash) + '"->"' + commitHash + '"[dir=back,label="Cherry\\nPick",style=dotted,fontcolor="red",color="red"]')
                    print('    "' + str(existingHash) + '"->"' + commitHash + '"[label="Cherry\\nPick",style=dotted,fontcolor="red",color="red"]')
                    nodeColor = COLOR_NODE_CHERRY_PICK
                    #labelExt = "\\nCherry Pick"
        logging.info("Message: [%s]", message)
        if message.startswith("Revert"):
            # check for revert
            logging.info("Revert commit")
            match = re.match(revertMessagePattern, message)
            if match:
                originalMessage = match.group(1)
                logging.info("Revert match [%s]", originalMessage)
                origRevertHash = messages[originalMessage]
                print('    "' + commitHash + '"->"' + str(origRevertHash) + '"[dir=back,label="Revert",style=dotted,fontcolor="azure4",color="azure4"]')
            nodeColor = COLOR_NODE_REVERT

        nodeInfo = ""
        if ref:
            refEntries = ref.replace("(", "").replace(")", "").split(",")
            logging.info ("ref entries %s", refEntries)
            for refEntry in refEntries:
                fillcolor = COLOR_BRANCH
                linecolor = "black"
                shape = "oval"

                refEntry = refEntry.strip()
                refEntry = refEntry.replace("HEAD -> ", "")

                if "test" in refEntry:
                    fillcolor = COLOR_TEST
                elif "master" in refEntry:
                    fillcolor = COLOR_MASTER

                if "HEAD" in refEntry:
                    fillcolor = COLOR_HEAD
                    #continue
                elif "tag" in refEntry:
                    refEntry = refEntry.replace("tag: ", "")
                    fillcolor = COLOR_TAG
                    shape = "oval"
                elif "stash" in refEntry:
                    fillcolor = COLOR_STASH
                    shape = "box"
                    nodeColor = COLOR_STASH
                    labelExt = "\\nSTASH"
                    if getCommitDiff(parentHash1) == "":
                        predefinedNodeColor[parentHash1] = COLOR_STASH
                    elif getCommitDiff(parentHash2) == "":
                        predefinedNodeColor[parentHash2] = COLOR_STASH
                    continue
                #else:
                    #if "origin" in refEntry:
                    #    continue
                style = "shape=%s,fillcolor=%s" % (shape, fillcolor)
                refLabel = refEntry
                refLabel = re.sub(r'^\s*origin/', '', refLabel)

                nodeInfo += '    "' + refEntry + '"[label=\"' + refLabel + '\",style=filled,' + style + ']; "' + refEntry + '" -> "' + commitHash + '" [style=dotted];\n'

        numberOfLines = math.floor(len(nodeMessage)/60) + 1
        lineLength = round(len(nodeMessage) / numberOfLines)
        chunks = textwrap.wrap (nodeMessage, lineLength + 6)
        nm2 = ""
        for line in chunks:
          nm2 += "\\n"
          line = line.replace("\\", "\\\\")
          nm2 += line
        pdate = re.sub(r'^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}).*$', r'\1', pdate)
        print("    \"" + commitHash + "\"[label=\"" + user + " " + pdate + " (" + commitHash + ")" + nm2 + labelExt + "\",shape=" + nodeShape + graphviz_list("style", nodeStyle) + ",fillcolor=" + nodeColor + "];" + link + link2)
        #print("    \"" + commitHash + "\"[label=\"" + commitHash + nodeMessage + labelExt + "\\n(" + user + ")\",shape=box,style=filled,fillcolor=" + nodeColor + "];" + link + link2)
        if nodeInfo:
            print(nodeInfo)
print("}")

